; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\output\mk22f51212\flash_verify_program.o --asm_dir=.\Output\ --list_dir=.\Output\ --depend=.\output\mk22f51212\flash_verify_program.d --cpu=Cortex-M4 --apcs=interwork//ropi/rwpi --diag_suppress=1 -I. -I..\..\..\shared\cmsis\TARGET_Freescale\include -I..\..\..\shared\cmsis -I..\..\..\shared\flash_algo\TARGET_Freescale -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DCPU_MK22FN512VLL12 -D__NO_EMBEDDED_ASM --omf_browse=.\output\mk22f51212\flash_verify_program.crf ..\..\..\shared\flash_algo\TARGET_Freescale\flash\src\flash_verify_program.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  flash_verify_program PROC
;;;49     // See flash.h for documentation of this function.
;;;50     status_t flash_verify_program(flash_driver_t * driver,
000000  e92d4df0          PUSH     {r4-r8,r10,r11,lr}
;;;51                                   uint32_t start,
;;;52                                   uint32_t lengthInBytes,
;;;53                                   const uint8_t * expectedData,
;;;54                                   flash_margin_value_t margin,
;;;55                                   uint32_t * failedAddress,
;;;56                                   uint8_t * failedData)
;;;57     {
000004  001c              MOVS     r4,r3
000006  e9dd8709          LDRD     r8,r7,[sp,#0x24]
00000a  f8dda020          LDR      r10,[sp,#0x20]
00000e  4616              MOV      r6,r2
000010  460d              MOV      r5,r1
000012  d022              BEQ      |L1.90|
;;;58         if (expectedData == NULL)
;;;59         {
;;;60             return kStatus_InvalidArgument;
;;;61         }
;;;62     
;;;63         status_t returnCode = flash_check_range(driver, start, lengthInBytes);
000014  f7fffffe          BL       flash_check_range
;;;64         if (returnCode)
000018  2800              CMP      r0,#0
00001a  d11c              BNE      |L1.86|
;;;65         {
;;;66             return returnCode;
;;;67         }
;;;68     
;;;69         while (lengthInBytes)
;;;70         {
;;;71             // preparing passing parameter to program check the flash block
;;;72             kFCCOBx[0] = start;
00001c  f8dfb048          LDR      r11,|L1.104|
000020  44fb              ADD      r11,r11,pc
                  |L1.34|
000022  2e00              CMP      r6,#0                 ;69
000024  d017              BEQ      |L1.86|
000026  f8db0000          LDR      r0,[r11,#0]  ; kFCCOBx
00002a  6005              STR      r5,[r0,#0]
;;;73             HW_FTFx_FCCOBx_WR(0, FTFx_PROGRAM_CHECK);
00002c  480f              LDR      r0,|L1.108|
00002e  2102              MOVS     r1,#2
000030  71c1              STRB     r1,[r0,#7]
;;;74             HW_FTFx_FCCOBx_WR(4, margin);
000032  f880a00b          STRB     r10,[r0,#0xb]
;;;75             kFCCOBx[2] = *(uint32_t *)expectedData;
000036  f8db1000          LDR      r1,[r11,#0]  ; kFCCOBx
00003a  6820              LDR      r0,[r4,#0]
00003c  6088              STR      r0,[r1,#8]
;;;76     
;;;77             // calling flash command sequence function to execute the command
;;;78             returnCode = flash_command_sequence();
00003e  f7fffffe          BL       flash_command_sequence
;;;79     
;;;80             // checking for the success of command execution
;;;81             if (kStatus_Success != returnCode)
000042  b160              CBZ      r0,|L1.94|
;;;82             {
;;;83                 if (failedAddress)
000044  f1b80f00          CMP      r8,#0
000048  d001              BEQ      |L1.78|
;;;84                 {
;;;85                     *failedAddress  =  start;
00004a  f8c85000          STR      r5,[r8,#0]
                  |L1.78|
;;;86                 }
;;;87                 if (failedData)
00004e  2f00              CMP      r7,#0
000050  d001              BEQ      |L1.86|
;;;88                 {
;;;89                     *(uint32_t *)failedData = 0;
000052  2100              MOVS     r1,#0
000054  6039              STR      r1,[r7,#0]
                  |L1.86|
;;;90                 }
;;;91     
;;;92             // Read fail returned data: if K70, Nevis2, L1PT, L2K are selected
;;;93             //! @todo Use a feature macro to determine whether this is supported.
;;;94     // #if ((FTFx_KX_512K_512K_16K_4K_4K == FLASH_DERIVATIVE) || (FTFx_KX_1024K_0K_16K_4K_0K == FLASH_DERIVATIVE)\
;;;95     //         ||(FTFx_NX_256K_32K_2K_2K_1K == FLASH_DERIVATIVE)||(FTFx_NX_128K_32K_2K_2K_1K == FLASH_DERIVATIVE)\
;;;96     //         ||(FTFx_NX_96K_32K_2K_2K_1K == FLASH_DERIVATIVE)||(FTFx_NX_64K_32K_2K_2K_1K == FLASH_DERIVATIVE)\
;;;97     //         ||(FTFx_LX_128K_0K_0K_1K_0K == FLASH_DERIVATIVE)||(FTFx_LX_96K_0K_0K_1K_0K == FLASH_DERIVATIVE)\
;;;98     //         ||(FTFx_LX_64K_0K_0K_1K_0K == FLASH_DERIVATIVE)||(FTFx_LX_32K_0K_0K_1K_0K == FLASH_DERIVATIVE)\
;;;99     //         ||(FTFx_LX_8K_0K_0K_1K_0K == FLASH_DERIVATIVE))
;;;100    //                 *failedData     = 0x0;
;;;101    //                 *(failedData+1) = 0x0;
;;;102    //                 *(failedData+2) = 0x0;
;;;103    //                 *(failedData+3) = 0x0;
;;;104    // #else //other derivative
;;;105    // #if (ENDIANNESS == BIG_ENDIAN)  // Big Endian
;;;106    //                 *(failedData)   = FTFA->FCCOB4;
;;;107    //                 *(failedData+1) = FTFA->FCCOB5;
;;;108    //                 *(failedData+2) = FTFA->FCCOB6;
;;;109    //                 *(failedData+3) = FTFA->FCCOB7;
;;;110    // #else // Little Endian
;;;111    //                 *(failedData+3) = FTFA->FCCOB4;
;;;112    //                 *(failedData+2) = FTFA->FCCOB5;
;;;113    //                 *(failedData+1) = FTFA->FCCOB6;
;;;114    //                 *(failedData)   = FTFA->FCCOB7;
;;;115    // #endif //of ENDIANNESS
;;;116    // #endif // of FLASH_DERIVATIVE
;;;117    
;;;118                break;
;;;119            }
;;;120    
;;;121            lengthInBytes -= kFlashVerifyProgramUnitInBytes;
;;;122            expectedData += kFlashVerifyProgramUnitInBytes;
;;;123            start += kFlashVerifyProgramUnitInBytes;
;;;124        }
;;;125    
;;;126        return(returnCode);
;;;127    }
000056  e8bd8df0          POP      {r4-r8,r10,r11,pc}
                  |L1.90|
00005a  2004              MOVS     r0,#4                 ;60
00005c  e7fb              B        |L1.86|
                  |L1.94|
00005e  1f36              SUBS     r6,r6,#4              ;121
000060  1d24              ADDS     r4,r4,#4              ;122
000062  1d2d              ADDS     r5,r5,#4              ;123
000064  e7dd              B        |L1.34|
;;;128    
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      kFCCOBx+0x44 - {PC}
                  |L1.108|
                          DCD      0x40020000
