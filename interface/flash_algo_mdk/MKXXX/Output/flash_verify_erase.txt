; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\output\mk22f51212\flash_verify_erase.o --asm_dir=.\Output\ --list_dir=.\Output\ --depend=.\output\mk22f51212\flash_verify_erase.d --cpu=Cortex-M4 --apcs=interwork//ropi/rwpi --diag_suppress=1 -I. -I..\..\..\shared\cmsis\TARGET_Freescale\include -I..\..\..\shared\cmsis -I..\..\..\shared\flash_algo\TARGET_Freescale -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DCPU_MK22FN512VLL12 -D__NO_EMBEDDED_ASM --omf_browse=.\output\mk22f51212\flash_verify_erase.crf ..\..\..\shared\flash_algo\TARGET_Freescale\flash\src\flash_verify_erase.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  flash_verify_erase PROC
;;;52     // See flash.h for documentation of this function.
;;;53     status_t flash_verify_erase(flash_driver_t * driver, uint32_t start, uint32_t lengthInBytes, flash_margin_value_t margin)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;54     {
000004  469a              MOV      r10,r3
000006  4615              MOV      r5,r2
000008  460f              MOV      r7,r1
00000a  4604              MOV      r4,r0
;;;55         // Check arguments.
;;;56         status_t returnCode = flash_check_range(driver, start, lengthInBytes);
00000c  f7fffffe          BL       flash_check_range
;;;57         if (returnCode)
000010  2800              CMP      r0,#0
000012  d125              BNE      |L1.96|
000014  e9d40101          LDRD     r0,r1,[r4,#4]
;;;58         {
;;;59             return returnCode;
;;;60         }
;;;61     
;;;62         uint32_t blockSize = driver->PFlashTotalSize / driver->PFlashBlockCount;
000018  fbb0f8f1          UDIV     r8,r0,r1
;;;63         uint32_t nextBlockStartAddress = ALIGN_UP(start, blockSize);
00001c  4279              RSBS     r1,r7,#0
00001e  f1c80000          RSB      r0,r8,#0
000022  4001              ANDS     r1,r1,r0
000024  424e              RSBS     r6,r1,#0
;;;64         if (nextBlockStartAddress == start)
000026  42be              CMP      r6,r7
000028  d100              BNE      |L1.44|
                  |L1.42|
;;;65         {
;;;66             nextBlockStartAddress += blockSize;
00002a  4446              ADD      r6,r6,r8
                  |L1.44|
;;;67         }
;;;68     
;;;69     
;;;70         uint32_t remainingBytes = lengthInBytes;
;;;71     
;;;72         while (remainingBytes)
00002c  b1bd              CBZ      r5,|L1.94|
;;;73         {
;;;74             uint32_t verifyLength = nextBlockStartAddress - start;
00002e  1bf4              SUBS     r4,r6,r7
;;;75             if (verifyLength > remainingBytes)
000030  42ac              CMP      r4,r5
000032  d900              BLS      |L1.54|
;;;76             {
;;;77                 verifyLength = remainingBytes;
000034  462c              MOV      r4,r5
                  |L1.54|
;;;78             }
;;;79     
;;;80             uint32_t numberOfPhrases = verifyLength / kFlashVerifyUnitInBytes;
;;;81     
;;;82             // Fill in verify section command parameters.
;;;83             kFCCOBx[0] = start;
000036  490b              LDR      r1,|L1.100|
000038  08a0              LSRS     r0,r4,#2              ;80
00003a  4479              ADD      r1,r1,pc
00003c  6809              LDR      r1,[r1,#0]  ; kFCCOBx
00003e  600f              STR      r7,[r1,#0]
;;;84             HW_FTFx_FCCOBx_WR(0, FTFx_VERIFY_SECTION);
000040  4909              LDR      r1,|L1.104|
000042  2201              MOVS     r2,#1
000044  71ca              STRB     r2,[r1,#7]
;;;85             HW_FTFx_FCCOBx_WR(4, numberOfPhrases >> 8);
000046  0a02              LSRS     r2,r0,#8
000048  72ca              STRB     r2,[r1,#0xb]
;;;86             HW_FTFx_FCCOBx_WR(5, numberOfPhrases & 0xFF);
00004a  7288              STRB     r0,[r1,#0xa]
;;;87             HW_FTFx_FCCOBx_WR(6, margin);
00004c  f881a009          STRB     r10,[r1,#9]
;;;88     
;;;89             // calling flash command sequence function to execute the command
;;;90             returnCode = flash_command_sequence();
000050  f7fffffe          BL       flash_command_sequence
;;;91             if (returnCode)
000054  2800              CMP      r0,#0
000056  d103              BNE      |L1.96|
;;;92             {
;;;93                 return returnCode;
;;;94             }
;;;95     
;;;96             remainingBytes -= verifyLength;
000058  1b2d              SUBS     r5,r5,r4
;;;97             start += verifyLength;
00005a  4427              ADD      r7,r7,r4
;;;98             nextBlockStartAddress += blockSize;
;;;99         }
00005c  e7e5              B        |L1.42|
                  |L1.94|
;;;100    
;;;101        return kStatus_Success;
00005e  2000              MOVS     r0,#0
                  |L1.96|
;;;102    }
000060  e8bd87f0          POP      {r4-r10,pc}
;;;103    
                          ENDP

                  |L1.100|
                          DCD      kFCCOBx+0x26 - {PC}
                  |L1.104|
                          DCD      0x40020000
