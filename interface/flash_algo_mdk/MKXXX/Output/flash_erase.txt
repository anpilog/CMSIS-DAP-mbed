; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\output\mk22f51212\flash_erase.o --asm_dir=.\Output\ --list_dir=.\Output\ --depend=.\output\mk22f51212\flash_erase.d --cpu=Cortex-M4 --apcs=interwork//ropi/rwpi --diag_suppress=1 -I. -I..\..\..\shared\cmsis\TARGET_Freescale\include -I..\..\..\shared\cmsis -I..\..\..\shared\flash_algo\TARGET_Freescale -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DCPU_MK22FN512VLL12 -D__NO_EMBEDDED_ASM --omf_browse=.\output\mk22f51212\flash_erase.crf ..\..\..\shared\flash_algo\TARGET_Freescale\flash\src\flash_erase.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  flash_erase PROC
;;;39     // See flash.h for documentation of this function.
;;;40     status_t flash_erase(flash_driver_t * driver, uint32_t start, uint32_t lengthInBytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;41     {
000004  4615              MOV      r5,r2
000006  460c              MOV      r4,r1
;;;42         // Check the supplied address range.
;;;43         status_t returnCode = flash_check_range(driver, start, lengthInBytes);
000008  f7fffffe          BL       flash_check_range
;;;44         if (returnCode)
00000c  2800              CMP      r0,#0
00000e  d11b              BNE      |L1.72|
;;;45         {
;;;46             return returnCode;
;;;47         }
;;;48     
;;;49         uint32_t endAddress;      // storing end address
;;;50         uint32_t numberOfSectors;  // number of sectors calculated by endAddress
;;;51     
;;;52         // calculating Flash end address
;;;53         endAddress = start + lengthInBytes - 1;
000010  4425              ADD      r5,r5,r4
000012  1e6d              SUBS     r5,r5,#1
;;;54     
;;;55         // re-calculate the endAddress and align it to the start of the next sector
;;;56         // which will be used in the comparison below
;;;57         if (endAddress % FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE)
000014  0569              LSLS     r1,r5,#21
000016  d005              BEQ      |L1.36|
;;;58         {
;;;59             numberOfSectors = endAddress / FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE + 1;
000018  2101              MOVS     r1,#1
00001a  eb0121d5          ADD      r1,r1,r5,LSR #11
;;;60             endAddress = numberOfSectors * FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE - 1;
00001e  1e42              SUBS     r2,r0,#1
000020  eb0225c1          ADD      r5,r2,r1,LSL #11
                  |L1.36|
;;;61         }
;;;62     
;;;63         // the start address will increment to the next sector address
;;;64         // until it reaches the endAdddress
;;;65         while (start <= endAddress)
;;;66         {
;;;67             // preparing passing parameter to erase a flash block
;;;68             kFCCOBx[0] = start;
000024  4e09              LDR      r6,|L1.76|
000026  447e              ADD      r6,r6,pc
;;;69             HW_FTFx_FCCOBx_WR(0, FTFx_ERASE_SECTOR);
000028  f8df8024          LDR      r8,|L1.80|
00002c  2709              MOVS     r7,#9
                  |L1.46|
00002e  42ac              CMP      r4,r5                 ;65
000030  d80a              BHI      |L1.72|
000032  6830              LDR      r0,[r6,#0]            ;68  ; kFCCOBx
000034  6004              STR      r4,[r0,#0]            ;68
000036  f8887007          STRB     r7,[r8,#7]
;;;70     
;;;71             // calling flash command sequence function to execute the command
;;;72             returnCode = flash_command_sequence();
00003a  f7fffffe          BL       flash_command_sequence
;;;73     
;;;74             // checking the success of command execution
;;;75             if (kStatus_Success != returnCode)
00003e  2800              CMP      r0,#0
000040  d102              BNE      |L1.72|
;;;76             {
;;;77                 break;
;;;78             }
;;;79             else
;;;80             {
;;;81                 // Increment to the next sector
;;;82                 start += FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE;
000042  f5046400          ADD      r4,r4,#0x800
000046  e7f2              B        |L1.46|
                  |L1.72|
;;;83             }
;;;84         }
;;;85     
;;;86         return(returnCode);
;;;87     }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;88     
                          ENDP

                  |L1.76|
                          DCD      kFCCOBx+0x22 - {PC}
                  |L1.80|
                          DCD      0x40020000
