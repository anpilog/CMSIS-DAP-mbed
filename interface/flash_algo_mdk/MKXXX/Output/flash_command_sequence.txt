; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\output\mk22f51212\flash_command_sequence.o --asm_dir=.\Output\ --list_dir=.\Output\ --depend=.\output\mk22f51212\flash_command_sequence.d --cpu=Cortex-M4 --apcs=interwork//ropi/rwpi --diag_suppress=1 -I. -I..\..\..\shared\cmsis\TARGET_Freescale\include -I..\..\..\shared\cmsis -I..\..\..\shared\flash_algo\TARGET_Freescale -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DCPU_MK22FN512VLL12 -D__NO_EMBEDDED_ASM --omf_browse=.\output\mk22f51212\flash_command_sequence.crf ..\..\..\shared\flash_algo\TARGET_Freescale\flash\src\flash_command_sequence.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  flash_command_sequence PROC
;;;107    ////////////////////////////////////////////////////////////////////////////////
;;;108    status_t flash_command_sequence(void)
000000  480a              LDR      r0,|L1.44|
;;;109    {
;;;110        // clear RDCOLERR & ACCERR & FPVIOL flag in flash status register
;;;111        HW_FTFx_FSTAT_WR(BM_FTFx_FSTAT_RDCOLERR | BM_FTFx_FSTAT_ACCERR | BM_FTFx_FSTAT_FPVIOL);
000002  2170              MOVS     r1,#0x70
000004  7001              STRB     r1,[r0,#0]
;;;112    
;;;113    #if BL_TARGET_FLASH
;;;114        callFlashRunCommand();
;;;115    #else
;;;116        // clear CCIF bit
;;;117        HW_FTFx_FSTAT_WR(BM_FTFx_FSTAT_CCIF);
000006  2180              MOVS     r1,#0x80
000008  7001              STRB     r1,[r0,#0]
                  |L1.10|
;;;118    
;;;119        // check CCIF bit of the flash status register, wait till it is set
;;;120        while (!(HW_FTFx_FSTAT.B.CCIF));
00000a  7801              LDRB     r1,[r0,#0]
00000c  0609              LSLS     r1,r1,#24
00000e  d5fc              BPL      |L1.10|
;;;121    #endif
;;;122    
;;;123        // Check error bits
;;;124        // Get flash status register value
;;;125        uint8_t registerValue = FTFx->FSTAT;
000010  7800              LDRB     r0,[r0,#0]
;;;126    
;;;127        // checking access error
;;;128        if (registerValue & BM_FTFx_FSTAT_ACCERR)
000012  0681              LSLS     r1,r0,#26
000014  d501              BPL      |L1.26|
;;;129        {
;;;130            return kStatus_FlashAccessError;
000016  2067              MOVS     r0,#0x67
;;;131        }
;;;132        // checking protection error
;;;133        else if (registerValue & BM_FTFx_FSTAT_FPVIOL)
;;;134        {
;;;135            return kStatus_FlashProtectionViolation;
;;;136        }
;;;137        // checking MGSTAT0 non-correctable error
;;;138        else if (registerValue & BM_FTFx_FSTAT_MGSTAT0)
;;;139        {
;;;140            return kStatus_FlashCommandFailure;
;;;141        }
;;;142    
;;;143        return kStatus_Success;
;;;144    }
000018  4770              BX       lr
                  |L1.26|
00001a  06c1              LSLS     r1,r0,#27             ;133
00001c  d501              BPL      |L1.34|
00001e  2068              MOVS     r0,#0x68              ;135
                  |L1.32|
000020  4770              BX       lr
                  |L1.34|
000022  07c0              LSLS     r0,r0,#31             ;138
000024  d0fc              BEQ      |L1.32|
000026  2069              MOVS     r0,#0x69              ;140
000028  4770              BX       lr
;;;145    ////////////////////////////////////////////////////////////////////////////////
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x40020000
