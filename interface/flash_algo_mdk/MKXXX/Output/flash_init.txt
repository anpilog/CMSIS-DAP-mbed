; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave --gnu -o.\output\mk22f51212\flash_init.o --asm_dir=.\Output\ --list_dir=.\Output\ --depend=.\output\mk22f51212\flash_init.d --cpu=Cortex-M4 --apcs=interwork//ropi/rwpi --diag_suppress=1 -I. -I..\..\..\shared\cmsis\TARGET_Freescale\include -I..\..\..\shared\cmsis -I..\..\..\shared\flash_algo\TARGET_Freescale -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Toshiba -DCPU_MK22FN512VLL12 -D__NO_EMBEDDED_ASM --omf_browse=.\output\mk22f51212\flash_init.crf ..\..\..\shared\flash_algo\TARGET_Freescale\flash\src\flash_init.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  flash_init PROC
;;;57     // See flash.h for documentation of this function.
;;;58     status_t flash_init(flash_driver_t * driver)
000000  b190              CBZ      r0,|L1.40|
;;;59     {
;;;60         if (driver == NULL)
;;;61         {
;;;62             return kStatus_InvalidArgument;
;;;63         }
;;;64     
;;;65         // calculate the flash density from SIM_FCFG1.PFSIZE
;;;66         uint32_t flashDensity = kFlashDensities[HW_SIM_FCFG1.B.PFSIZE] << 12;
000002  4916              LDR      r1,|L1.92|
000004  6cc9              LDR      r1,[r1,#0x4c]
000006  4a16              LDR      r2,|L1.96|
000008  f3c16103          UBFX     r1,r1,#24,#4
00000c  447a              ADD      r2,r2,pc
00000e  f8321011          LDRH     r1,[r2,r1,LSL #1]
000012  0309              LSLS     r1,r1,#12
;;;67         if (flashDensity == 0)
000014  d00a              BEQ      |L1.44|
;;;68         {
;;;69             return kStatus_FlashSizeError;
;;;70         }
;;;71     
;;;72         // fill out a few of the structure members
;;;73         driver->PFlashBlockBase = FLASH_BLOCK_BASE;
000016  2200              MOVS     r2,#0
000018  e9c02100          STRD     r2,r1,[r0,#0]
;;;74         driver->PFlashTotalSize = flashDensity;
;;;75         driver->PFlashBlockCount = FSL_FEATURE_FLASH_PFLASH_BLOCK_COUNT;
00001c  2102              MOVS     r1,#2
;;;76         driver->PFlashSectorSize = FSL_FEATURE_FLASH_PFLASH_BLOCK_SECTOR_SIZE;
00001e  6081              STR      r1,[r0,#8]
000020  0289              LSLS     r1,r1,#10
;;;77     
;;;78         // copy flash_run_command() to RAM
;;;79     #if BL_TARGET_FLASH
;;;80         copy_flash_run_command();
;;;81     #endif
;;;82     
;;;83         return kStatus_Success;
000022  60c1              STR      r1,[r0,#0xc]
000024  4610              MOV      r0,r2
;;;84     }
000026  4770              BX       lr
                  |L1.40|
000028  2004              MOVS     r0,#4                 ;62
00002a  4770              BX       lr
                  |L1.44|
00002c  2064              MOVS     r0,#0x64              ;69
00002e  4770              BX       lr
;;;85     
                          ENDP

                  flash_check_range PROC
;;;86     // See SSD_FTFx_Common.h for documentation of this function.
;;;87     status_t flash_check_range(flash_driver_t * driver, uint32_t start, uint32_t lengthInBytes)
000030  b128              CBZ      r0,|L1.62|
;;;88     {
;;;89         if (driver == NULL)
;;;90         {
;;;91             return kStatus_InvalidArgument;
;;;92         }
;;;93     
;;;94         // Verify the start and length are write-unit-size aligned.
;;;95         if ((start & (FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_SIZE - 1))
000032  ea410302          ORR      r3,r1,r2
000036  079b              LSLS     r3,r3,#30
000038  d003              BEQ      |L1.66|
;;;96             || (lengthInBytes & (FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_SIZE - 1)))
;;;97         {
;;;98             return kStatus_FlashAlignmentError;
00003a  2065              MOVS     r0,#0x65
;;;99         }
;;;100    
;;;101        // check for valid range of the target addresses
;;;102        if ((start < driver->PFlashBlockBase) ||
;;;103            ((start+lengthInBytes) > (driver->PFlashBlockBase + driver->PFlashTotalSize)))
;;;104        {
;;;105            return kStatus_FlashAddressError;
;;;106        }
;;;107    
;;;108        return kStatus_Success;
;;;109    }
00003c  4770              BX       lr
                  |L1.62|
00003e  2004              MOVS     r0,#4                 ;91
000040  4770              BX       lr
                  |L1.66|
000042  6803              LDR      r3,[r0,#0]            ;102
000044  428b              CMP      r3,r1                 ;102
000046  d804              BHI      |L1.82|
000048  6840              LDR      r0,[r0,#4]            ;103
00004a  4411              ADD      r1,r1,r2              ;103
00004c  4418              ADD      r0,r0,r3              ;103
00004e  4288              CMP      r0,r1                 ;103
000050  d201              BCS      |L1.86|
                  |L1.82|
000052  2066              MOVS     r0,#0x66              ;105
000054  4770              BX       lr
                  |L1.86|
000056  2000              MOVS     r0,#0                 ;108
000058  4770              BX       lr
;;;110    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      0x40048000
                  |L1.96|
                          DCD      kFlashDensities+0x50 - {PC}

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  kFCCOBx
                          DCD      0x40020004
